<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="help" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\help.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="info" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\info.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="keeprunning" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\keeprunning.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="start" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\start.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="stop" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\stop.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="timer" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\timer.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ProcessName" xml:space="preserve">
    <value>Process name</value>
  </data>
  <data name="ChooseFile" xml:space="preserve">
    <value>Choose file</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="LastActivity" xml:space="preserve">
    <value>Last Activity</value>
  </data>
  <data name="ExecutableFilesExe" xml:space="preserve">
    <value>Executable Files|*.exe</value>
  </data>
  <data name="Monitoring0" xml:space="preserve">
    <value>Monitoring {0} {1}</value>
  </data>
  <data name="FileNotValid0" xml:space="preserve">
    <value>File not valid: {0}</value>
  </data>
  <data name="ProcessIsRunning" xml:space="preserve">
    <value>Program {0} is running</value>
  </data>
  <data name="ProcessIsNotRunningAndWillBeStarted" xml:space="preserve">
    <value>Program {0} is not running and will be started</value>
  </data>
  <data name="ContextMenuRegister" xml:space="preserve">
    <value>Register context menu</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>KeepRunning</value>
    <comment>@Invariant</comment>
  </data>
  <data name="Hourly" xml:space="preserve">
    <value>Once an hour</value>
  </data>
  <data name="TwoTimesADay" xml:space="preserve">
    <value>twice a day</value>
  </data>
  <data name="Daily" xml:space="preserve">
    <value>Once a day</value>
  </data>
  <data name="running" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\running.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="NoValidExecutableExeFile" xml:space="preserve">
    <value>No valid executable file!</value>
  </data>
  <data name="DesktopLink" xml:space="preserve">
    <value>Create desktop link</value>
  </data>
  <data name="ProcessNameToCheck" xml:space="preserve">
    <value>Process name to check if executable is not found in process list</value>
  </data>
  <data name="StartStopMonitoring" xml:space="preserve">
    <value>start/stop monitoring</value>
  </data>
  <data name="ChooseCheckInterval" xml:space="preserve">
    <value>Choose check interval</value>
  </data>
  <data name="leave" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\leave.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ClickToChoose" xml:space="preserve">
    <value>Click to choose the executable to monitor</value>
  </data>
  <data name="AnotherInstanceIsAlreadyRunning" xml:space="preserve">
    <value>Another instance is already running!</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="save" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\save.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SettingsHaveChangedPleaseClickSaveButton" xml:space="preserve">
    <value>Settings changed. Please click 'Save' button!</value>
  </data>
  <data name="rechteck_40x40" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\rechteck-40x40.gif;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="rechteck_80x80" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\rechteck-80x80.gif;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Monitoring0Stopped" xml:space="preserve">
    <value>Monitoring {0} stopped</value>
  </data>
  <data name="SaveSettings" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>A small application to check periodically whether a program is running and to start that program if it is not running.&lt;br&gt;
1. Choose a program with a click on the button.&lt;br&gt;
2. If it is not in the systems processes list, type the processname in the field below.&lt;br&gt;
3. Adjust the time period to hourly, twice a day or daily.&lt;br&gt;
4. Save the settings with a click on the Save button.&lt;br&gt;
6. Start/Stop the monitoring with a click on the timer button in the middle of the screen.&lt;br&gt;
You can create a desktop link and a context menu entry for the windows explorer via the taskbar icon menu.</value>
  </data>
  <data name="InfoAbout" xml:space="preserve">
    <value>Info about {0}</value>
  </data>
  <data name="logo_shield" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\icons\logo-shield.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="HelpLabel" xml:space="preserve">
    <value>About</value>
    
  </data>
  <data name="ConfirmExit" xml:space="preserve">
    <value>Exit application</value>
  </data>
  <data name="_0IsStillBeingMonitored" xml:space="preserve">
    <value>{0} is still being monitored.</value>
  </data>
  <data name="ReallyCloseTheApplication" xml:space="preserve">
    <value>Really close the application?</value>
  </data>
</root>