<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChooseFile" xml:space="preserve">
    <value>Dateiauswahl</value>
  </data>
  <data name="ContextMenuRegister" xml:space="preserve">
    <value>Kontextmenü registrieren</value>
  </data>
  <data name="Daily" xml:space="preserve">
    <value>einmal täglich</value>
  </data>
  <data name="ExecutableFilesExe" xml:space="preserve">
    <value>Ausführbare Dateien|*.exe</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Beenden</value>
  </data>
  <data name="FileNotValid0" xml:space="preserve">
    <value>Datei nicht gültig: {0}</value>
  </data>
  <data name="Hourly" xml:space="preserve">
    <value>einmal stündlich</value>
  </data>
  <data name="LastActivity" xml:space="preserve">
    <value>Letzte Aktivität</value>
  </data>
  <data name="Monitoring0" xml:space="preserve">
    <value>Überwache {0} {1}</value>
  </data>
  <data name="NoValidExecutableExeFile" xml:space="preserve">
    <value>Keine gültige ausführbare Datei!</value>
  </data>
  <data name="ProcessIsNotRunningAndWillBeStarted" xml:space="preserve">
    <value>Programm {0} läuft nicht und wird gestartet</value>
  </data>
  <data name="ProcessIsRunning" xml:space="preserve">
    <value>Programm {0} läuft</value>
  </data>
  <data name="ProcessName" xml:space="preserve">
    <value>Prozessname</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Fertig</value>
  </data>
  <data name="TwoTimesADay" xml:space="preserve">
    <value>zweimal  täglich</value>
  </data>
  <data name="DesktopLink" xml:space="preserve">
    <value>Desktop-Link erstellen</value>
  </data>
  <data name="ProcessNameToCheck" xml:space="preserve">
    <value>Zu prüfender Prozessname, falls ausführbare Datei nicht in Prozessliste erscheint</value>
  </data>
  <data name="ChooseCheckInterval" xml:space="preserve">
    <value>Prüfungsintervall festlegen</value>
  </data>
  <data name="StartStopMonitoring" xml:space="preserve">
    <value>Monitoring starten/stoppen</value>
  </data>
  <data name="ClickToChoose" xml:space="preserve">
    <value>Klicken, um die zu überwachende ausführbare Datei zu wählen</value>
  </data>
  <data name="AnotherInstanceIsAlreadyRunning" xml:space="preserve">
    <value>Eine andere Programminstanz ist bereits aktiv!</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Fehler</value>
  </data>
  <data name="SettingsHaveChangedPleaseClickSaveButton" xml:space="preserve">
    <value>Einstellungen geändert. Bitte 'Speichern'-Button anklicken!</value>
  </data>
  <data name="Monitoring0Stopped" xml:space="preserve">
    <value>Überwachung von {0} gestoppt</value>
  </data>
  <data name="SaveSettings" xml:space="preserve">
    <value>Speichern</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Eine kleine Anwendung, um regelmäßig zu überprüfen, ob ein Programm ausgeführt wird, und um das Programm zu starten, wenn es nicht ausgeführt wird.&lt;br&gt;
1. Wählen Sie ein Programm mit einem Klick auf den Button aus.&lt;br&gt;
2. Wenn es nicht in der Liste der Systemprozesse enthalten ist, geben Sie den Prozessnamen in das Feld unten ein.&lt;br&gt;
3. Stellen Sie den Zeitraum auf stündlich, zweimal täglich oder täglich ein.&lt;br&gt;
4. Speichern Sie die Einstellungen mit einem Klick auf die Schaltfläche Speichern.&lt;br&gt;
6. Starten/stoppen Sie die Überwachung mit einem Klick auf die Timer-Schaltfläche in der Mitte des Bildschirms.&lt;br&gt;
Über das Taskleistensymbol können Sie sowohl ein Desktopsymbol als auch einen Kontextmenü-Eintrag für den Windows Explorer erstellen.</value>
  </data>
  <data name="InfoAbout" xml:space="preserve">
    <value>Info über {0}</value>
  </data>
  <data name="HelpLabel" xml:space="preserve">
    <value>Über</value>
  </data>
</root>